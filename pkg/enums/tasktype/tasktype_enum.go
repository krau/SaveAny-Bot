// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.1
// Revision: a6f63bddde05aca4221df9c8e9e6d7d9674b1cb4
// Build Date: 2025-03-18T23:42:14Z
// Built By: goreleaser

package tasktype

import (
	"fmt"
	"strings"
)

const (
	// TaskTypeTgfiles is a TaskType of type tgfiles.
	TaskTypeTgfiles TaskType = "tgfiles"
	// TaskTypeTphpics is a TaskType of type tphpics.
	TaskTypeTphpics TaskType = "tphpics"
)

var ErrInvalidTaskType = fmt.Errorf("not a valid TaskType, try [%s]", strings.Join(_TaskTypeNames, ", "))

var _TaskTypeNames = []string{
	string(TaskTypeTgfiles),
	string(TaskTypeTphpics),
}

// TaskTypeNames returns a list of possible string values of TaskType.
func TaskTypeNames() []string {
	tmp := make([]string, len(_TaskTypeNames))
	copy(tmp, _TaskTypeNames)
	return tmp
}

// TaskTypeValues returns a list of the values for TaskType
func TaskTypeValues() []TaskType {
	return []TaskType{
		TaskTypeTgfiles,
		TaskTypeTphpics,
	}
}

// String implements the Stringer interface.
func (x TaskType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TaskType) IsValid() bool {
	_, err := ParseTaskType(string(x))
	return err == nil
}

var _TaskTypeValue = map[string]TaskType{
	"tgfiles": TaskTypeTgfiles,
	"tphpics": TaskTypeTphpics,
}

// ParseTaskType attempts to convert a string to a TaskType.
func ParseTaskType(name string) (TaskType, error) {
	if x, ok := _TaskTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _TaskTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return TaskType(""), fmt.Errorf("%s is %w", name, ErrInvalidTaskType)
}

// Set implements the Golang flag.Value interface func.
func (x *TaskType) Set(val string) error {
	v, err := ParseTaskType(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *TaskType) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *TaskType) Type() string {
	return "TaskType"
}
