// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.1
// Revision: a6f63bddde05aca4221df9c8e9e6d7d9674b1cb4
// Build Date: 2025-03-18T23:42:14Z
// Built By: goreleaser

package taskstatus

import (
	"fmt"
	"strings"
)

const (
	// Pending is a TaskStatus of type pending.
	Pending TaskStatus = "pending"
	// Succeeded is a TaskStatus of type succeeded.
	Succeeded TaskStatus = "succeeded"
	// Failed is a TaskStatus of type failed.
	Failed TaskStatus = "failed"
	// Canceled is a TaskStatus of type canceled.
	Canceled TaskStatus = "canceled"
)

var ErrInvalidTaskStatus = fmt.Errorf("not a valid TaskStatus, try [%s]", strings.Join(_TaskStatusNames, ", "))

var _TaskStatusNames = []string{
	string(Pending),
	string(Succeeded),
	string(Failed),
	string(Canceled),
}

// TaskStatusNames returns a list of possible string values of TaskStatus.
func TaskStatusNames() []string {
	tmp := make([]string, len(_TaskStatusNames))
	copy(tmp, _TaskStatusNames)
	return tmp
}

// TaskStatusValues returns a list of the values for TaskStatus
func TaskStatusValues() []TaskStatus {
	return []TaskStatus{
		Pending,
		Succeeded,
		Failed,
		Canceled,
	}
}

// String implements the Stringer interface.
func (x TaskStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TaskStatus) IsValid() bool {
	_, err := ParseTaskStatus(string(x))
	return err == nil
}

var _TaskStatusValue = map[string]TaskStatus{
	"pending":   Pending,
	"succeeded": Succeeded,
	"failed":    Failed,
	"canceled":  Canceled,
}

// ParseTaskStatus attempts to convert a string to a TaskStatus.
func ParseTaskStatus(name string) (TaskStatus, error) {
	if x, ok := _TaskStatusValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _TaskStatusValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return TaskStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidTaskStatus)
}

// Set implements the Golang flag.Value interface func.
func (x *TaskStatus) Set(val string) error {
	v, err := ParseTaskStatus(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *TaskStatus) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *TaskStatus) Type() string {
	return "TaskStatus"
}
